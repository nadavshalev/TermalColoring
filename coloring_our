import keras
import os
import numpy as np
import skimage
from net_functions import *


def get_model():
    ly = keras.layers
    md = keras.models

    # Encoder
    encoder_input = ly.Input(shape=(256, 256, 1,))
    encoder_output = ly.Conv2D(64, (3, 3), activation='relu', padding='same', strides=2)(encoder_input)
    encoder_output = ly.Conv2D(128, (3, 3), activation='relu', padding='same')(encoder_output)
    encoder_output = ly.Conv2D(128, (3, 3), activation='relu', padding='same', strides=2)(encoder_output)
    encoder_output = ly.Conv2D(256, (3, 3), activation='relu', padding='same')(encoder_output)
    encoder_output = ly.Conv2D(256, (3, 3), activation='relu', padding='same', strides=2)(encoder_output)
    encoder_output = ly.Conv2D(512, (3, 3), activation='relu', padding='same')(encoder_output)
    encoder_output = ly.Conv2D(512, (3, 3), activation='relu', padding='same')(encoder_output)
    encoder_output = ly.Conv2D(256, (3, 3), activation='relu', padding='same')(encoder_output)

    # Decoder
    decoder_output = ly.Conv2D(128, (3, 3), activation='relu', padding='same')(encoder_output)
    decoder_output = ly.UpSampling2D((2, 2))(decoder_output)
    decoder_output = ly.Conv2D(64, (3, 3), activation='relu', padding='same')(decoder_output)
    decoder_output = ly.UpSampling2D((2, 2))(decoder_output)
    decoder_output = ly.Conv2D(32, (3, 3), activation='relu', padding='same')(decoder_output)
    decoder_output = ly.Conv2D(16, (3, 3), activation='relu', padding='same')(decoder_output)
    decoder_output = ly.Conv2D(2, (3, 3), activation='tanh', padding='same')(decoder_output)
    decoder_output = ly.UpSampling2D((2, 2))(decoder_output)

    return md.Model(inputs=encoder_input, outputs=decoder_output)


path_test = '../../data/colorIm/testdata/Validate/'
path_train = '../../data/colorIm/images/Train/'
path_res = './results/'

data_train, data_val, data_test = load_data(path_test=path_test, path_train=path_train, val_size=0, train_num=100)

X_train, Y_train = get_data_labels(data_train)
# X_val, Y_val = get_data_labels(data_val)

model = get_model()
model.compile(optimizer='adam', loss='mae')

datagen = keras.preprocessing.image.ImageDataGenerator(
        shear_range=0.2,
        zoom_range=0.2,
        rotation_range=20,
        horizontal_flip=True)
datagen.fit(X_train)

model.fit(x=X_train, y=Y_train, batch_size=50, epochs=2,
          verbose=2, validation_split=0.1, steps_per_epoch=None, validation_steps=None, validation_freq=5)

output = model.predict(skimage.color.rgb2gray(1.0/255*data_test))
output = output * 128

save_results(output, path_res)

